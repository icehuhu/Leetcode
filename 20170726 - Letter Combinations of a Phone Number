std::vector<std::vector<std::string>> map = { {" "},{"1"}, {"a","b","c"},{ "d","e","f" },{ "g","h","i" },{ "j","k","l" },{ "m","n","o" },{ "p","q","r","s" },{ "t","u","v" },{ "w","x","y","z" } };
std::vector<std::string> subLetterCombinations(std::string digits, int i)
{
	std::vector<std::string> result;
	std::vector<std::string> subresult;
	std::vector<std::string> temp = map[(int)(digits[i] - '0')];
	int jlen = temp.size();
	if (i + 1 == digits.length())
	{
		for (int j = 0; j < jlen; j++)
		{
			result.push_back(temp[j]);
		}
	}
	else
	{
		subresult = subLetterCombinations(digits, i + 1);
		for (int j = 0; j < jlen; j++)
		{
			for (int k = 0; k < subresult.size(); k++)
			{
				result.push_back(temp[j] + subresult[k]);
			}
		}
	}
	return result;
}


std::vector<std::string> letterCombinations(std::string digits) {
	std::vector<std::string> result;
	if (digits.length() == 0) return result;
	return subLetterCombinations(digits, 0);
}
