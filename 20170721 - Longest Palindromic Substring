class Solution {
public:
std::string childlenghstring(std::string s, int left, int right)
{
	std::string result;
	if (right - left != 1)
	{
		result.append(s.substr(left + 1, 1));
	}
	int slen = s.length();

	while (left >= 0 && right < slen)
	{
		if (s[left] != s[right])
		{
			return result;
		}
		result.insert(0, s.substr(left, 1));
		result.append(s.substr(right, 1));
		left--;
		right++;
	}
	return result;

}

std::string lenghstring(std::string s, int i)
{
	int left = i - 1;
	int right = i + 1;
	std::string result1;
	std::string result2;
	//start as middle char

	result1 = childlenghstring(s, i - 1, i + 1);

   //start as left point of 2 char

	result2 = childlenghstring(s, i, i + 1);

	if (result2.length() > result1.length()) result1 = result2;
	return result1;
}

std::string longestPalindrome(std::string s) {
	std::string result;
	std::string temp;
	int templen = 0;
	int maxlen = 0;
	for (int i = 0; i< s.length(); i++)
	{
		temp = lenghstring(s, i);
		templen = temp.length();
		if (templen > maxlen)
		{
			maxlen = templen;
			result = temp;
		}
	}
	return result;
}
};
